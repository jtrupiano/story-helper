#!/usr/bin/env ruby
# storify
# Author: John Trupiano
#
# Steps
# 1) Check if lib/story_helper.rb exists-- if not, let's place it in there
# 2) Check if lib/story_accessors.rb exists-- if not, let's place it in there
# 3) Check if lib/tasks/story_helper.rake exists-- if not, let's place it in there
# 4) Tell them to update their test_helper.rb file
#
# 5) How else can we help the user out?  
#    Can we auto-convert their fixtures?  
#    How about creating default StoryAccessors sections for each model?
#    What else??

require 'fileutils'
include FileUtils

#require 'yaml'

class Storify
  
  def self.run!
    rails_root = ARGV[0] || '.'
    puts "rails_root: #{rails_root}"
    
    # lib/story_helper.rb
    story_helper_rb = File.join(rails_root, 'lib', 'story_helper.rb')
    gem_story_helper_rb = File.dirname(__FILE__) + '/../lib/story-helper/conf/story_helper.rb'
    copy_if_missing(gem_story_helper_rb, story_helper_rb)

    # lib/story_accessors.rb
    story_accessors_rb = File.join(rails_root, 'lib', 'story_accessors.rb')
    gem_story_accessors_rb = File.dirname(__FILE__) + '/../lib/story-helper/conf/story_accessors.rb'
    copy_if_missing(gem_story_accessors_rb, story_accessors_rb)

    # lib/tasks/story_helper.rake
    story_helper_rake = File.join(rails_root, 'lib', 'tasks', 'story_helper.rake')
    gem_story_helper_rake = File.dirname(__FILE__) + '/../lib/story-helper/conf/story_helper.rake'
    copy_if_missing(gem_story_helper_rake, story_helper_rake)
  end
  
  def self.cleanup!
    rails_root = ARGV[0] || '.'
    puts "rails_root: #{rails_root}"
    
    # lib/story_helper.rb
    story_helper_rb = File.join(rails_root, 'lib', 'story_helper.rb')
    delete_unless_missing(story_helper_rb)

    # lib/story_accessors.rb
    story_accessors_rb = File.join(rails_root, 'lib', 'story_accessors.rb')
    delete_unless_missing(story_accessors_rb)

    # lib/tasks/story_helper.rake
    story_helper_rake = File.join(rails_root, 'lib', 'tasks', 'story_helper.rake')
    delete_unless_missing(story_helper_rake)
  end
  
  private
    def self.copy_if_missing(from, to)
      if !File.exists?(to)
        puts "cp #{from} #{to}"
        cp(from, to)
      else
        puts "#{to} already exists"
      end
    end
    
    def self.delete_unless_missing(file)
      if File.exists?(file)
        cmd = "rm #{file}"
        puts cmd
        rm_f(file)
      else
        puts "Deleting #{file}....doesn't exist."
      end
    end
    
end

if ARGV.size > 1 && ARGV[1] == "cleanup"
  Storify.cleanup!
else
  Storify.run!
  puts "Don't forget to include StoryAccessors::Methods into your test_helper."
end
